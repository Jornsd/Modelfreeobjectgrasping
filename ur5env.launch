<?xml version="1.0"?>
<launch>
  <arg name="limited" default="true"  doc="If true, limits joint range [-PI, PI] on all joints." />
  <arg name="paused" default="true" doc="Starts gazebo in paused mode" />
  <arg name="gui" default="true" doc="Starts gazebo gui" />
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
  
  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro '$(find ur5_env_description)/urdf/ur5env.urdf.xacro' transmission_hw_interface:=$(arg transmission_hw_interface)" />

  <!-- push robot_description to factory and spawn robot in initial pose in gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot 
          -z 0.0
          -J shoulder_pan_joint 0.0
          -J shoulder_lift_joint -1.5
          -J elbow_joint 1.6
          -J wrist_1_joint -1.5
          -J wrist_2_joint -1.5
          -J wrist_3_joint 0.0
          -unpause"
          respawn="false" output="screen"/>

  <include file="$(find ur_gazebo)/launch/controller_utils.launch"/>

  <!-- start arm controller -->
  <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>

  <!-- Starting laserscan assembler service for construction of object point cloud-->
  <node type="point_cloud2_assembler" pkg="laser_assembler" name="my_assembler">
    <remap from="cloud" to="/voxel_grid/output"/>
    <param name="max_scans" type="int" value="400" />
    <param name="fixed_frame" type="string" value="base_link" />
  </node>

  <!-- Start voxel grid filters -->
  <include file="$(find ur5_env_description)/launch/voxelgrid.launch"/>
  <include file="$(find ur5_env_description)/launch/assembled_voxelgrid_filtering.launch"/>

</launch>
